import styles from './Graphs.module.scss';
import React, { useEffect, useState } from 'react';
import { Pie, PieChart, Cell, Tooltip, Legend, XAxis, YAxis, Bar, BarChart, CartesianGrid } from 'recharts';
import axios from "axios"
const PieChartExample = () => {
    const [activeIndex, setActiveIndex] = useState(null);
    const [soldMotos, setSoldMotos] = useState([])
    const [soldCategories, setSoldCategories] = useState([])
    const [soldBrands, setSoldBrands] = useState([])
    const [users, setUsers] = useState([])

    useEffect(() => {
        axios.get(`${process.env.REACT_APP_HOST_NAME}/items/sold`)
        .then(d => {
            const auxMotosObj = {}
            const auxCategories=  {}
            const auxBrands = {}
            d.data.forEach(m => {
                const {brand, model, cc, price, category} = m.motorcycle
                if(auxMotosObj[`${brand} ${model} ${cc}`]){
                    auxMotosObj[`${brand} ${model} ${cc}`].price += price
                }else{
                    auxMotosObj[`${brand} ${model} ${cc}`] = {name: `${brand} ${model} ${cc}`, price}
                }

                if(auxCategories[category]){
                    auxCategories[category].price += price
                }else{
                    auxCategories[category] = {name: category, price}
                }

                if(auxBrands[brand]){
                    auxBrands[brand].price += price
                }else{
                    auxBrands[brand] = {name: brand, price}
                }
            })
            setSoldMotos(Object.values(auxMotosObj).slice(0,5))
            setSoldCategories(Object.values(auxCategories).slice(0,5))
            setSoldBrands(Object.values(auxBrands).slice(0,5))
    })

    axios.get(`${process.env.REACT_APP_HOST_NAME}/users/`)
    .then(d => {
        const auxUsers = [];
        d.data.forEach(u => {
            if(u.orders.length > 0)
            auxUsers.push({
                name: u.email,
                value: u.orders.length
            })
        })
        setUsers(auxUsers);
    })
    }, [])

    const handleMouseEnter = (data, index) => {
    setActiveIndex(index);
    };

    const handleMouseLeave = () => {
    setActiveIndex(null);
    };

    
const COLORS = ['#DDE6ED', '#9BABB8', '#EEE3CB', '#D7C0AE', "#967E76"];

    return (
    <div className={styles['graphs-container']}>
        <div className={styles['grid-container']}>
            <div style={{ gridColumn: '1 / 5'}} className={styles['grid-item']}>
                <div className={styles.text}>
                    <h3>Amounts entered by Items</h3>
                    <p>This graph shows the items sold and the dollar revenue generated by each item.</p>
                </div>
                <PieChart width={460} height={200}>
                    <Pie className={styles['pie']}
                        data={soldMotos}
                        dataKey="price"
                        cx={100}
                        cy={100}
                        outerRadius={90}
                        paddingAngle={1}
                        activeIndex={activeIndex}
                        onMouseEnter={handleMouseEnter}
                        onMouseLeave={handleMouseLeave}
                    >
                        {soldMotos?.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                    </Pie>
                    <Tooltip />
                    <Legend verticalAlign="bottom" align='right'layout='vertical' height={0} wrapperStyle={{right: "-30px"}}/>
                </PieChart>
            </div>

            <div style={{ gridColumn: '5 / 8'}} className={styles['grid-item']}>
                <div className={styles.text}>
                    <h3>Amounts entered by Brands</h3>
                    <p>This graph shows the revenue in dollars of each brand.</p>
                </div>
                <BarChart width={300} height={200} data={soldBrands}>
                    <CartesianGrid stroke='#c7c7c7' strokeDasharray="3 3" />
                    <XAxis stroke='#c7c7c7' dataKey="name" />
                    <YAxis stroke='#c7c7c7' />
                    <Tooltip />
                    <Bar
                        dataKey="price"
                        fill="#8884d8"
                    >
                    {soldBrands?.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                    </Bar>
                </BarChart>
            </div>

            <div style={{ gridColumn: '1 / 4'}} className={styles['grid-item']}>
                <div className={styles.text}>
                    <h3>Purchases made by Users</h3>
                    <p>This graph shows the number of purchases made by each user.</p>
                </div>
                <BarChart width={200} height={200} data={users}>
                    <CartesianGrid stroke='#c7c7c7' strokeDasharray="3 3" />
                    <XAxis stroke='#c7c7c7' dataKey="name" hide/>
                    <YAxis stroke='#c7c7c7' />
                    <Tooltip />
                    <Bar
                    dataKey="value"
                    fill="#8884d8"
                    >
                    {users?.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                    </Bar>
                </BarChart>
            </div>

            <div style={{ gridColumn: '4 / 8'}} className={styles['grid-item']}>
                <div className={styles.text}>
                    <h3>Amounts entered by Types</h3>
                    <p>This chart shows the types of items sold and the dollar revenue generated by each.</p>
                </div>
                <PieChart width={400} height={200}>
                    <Pie
                        data={soldCategories}
                        dataKey="price"
                        cx={100}
                        cy={100}
                        outerRadius={90}
                        paddingAngle={1}
                        activeIndex={activeIndex}
                        onMouseEnter={handleMouseEnter}
                        onMouseLeave={handleMouseLeave}
                    >
                    {soldCategories?.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                    </Pie>
                    <Tooltip />
                    <Legend verticalAlign="bottom" align='right'layout='vertical' height={0} />
                </PieChart>
            </div>
        </div>
    </div>
    );
};

export default PieChartExample;
    